// Code generated by MockGen. DO NOT EDIT.
// Source: VectorSphere/server/service_server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	messages "VectorSphere/src/messages"
	server "VectorSphere/src/server"

	gomock "github.com/golang/mock/gomock"
)

// MockServerInterface is a mock of ServerInterface interface.
type MockServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerInterfaceMockRecorder
}

// MockServerInterfaceMockRecorder is the mock recorder for MockServerInterface.
type MockServerInterfaceMockRecorder struct {
	mock *MockServerInterface
}

// NewMockServerInterface creates a new mock instance.
func NewMockServerInterface(ctrl *gomock.Controller) *MockServerInterface {
	mock := &MockServerInterface{ctrl: ctrl}
	mock.recorder = &MockServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerInterface) EXPECT() *MockServerInterfaceMockRecorder {
	return m.recorder
}

// AddDoc mocks base method.
func (m *MockServerInterface) AddDoc(document *messages.Document) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDoc", document)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDoc indicates an expected call of AddDoc.
func (mr *MockServerInterfaceMockRecorder) AddDoc(document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDoc", reflect.TypeOf((*MockServerInterface)(nil).AddDoc), document)
}

// Count mocks base method.
func (m *MockServerInterface) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockServerInterfaceMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServerInterface)(nil).Count))
}

// DelDoc mocks base method.
func (m *MockServerInterface) DelDoc(id *server.DocId) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelDoc", id)
	ret0, _ := ret[0].(int)
	return ret0
}

// DelDoc indicates an expected call of DelDoc.
func (mr *MockServerInterfaceMockRecorder) DelDoc(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelDoc", reflect.TypeOf((*MockServerInterface)(nil).DelDoc), id)
}

// Search mocks base method.
func (m *MockServerInterface) Search(query *messages.TermQuery, onFlag, offFlag uint64, orFlags []uint64) []*messages.Document {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query, onFlag, offFlag, orFlags)
	ret0, _ := ret[0].([]*messages.Document)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockServerInterfaceMockRecorder) Search(query, onFlag, offFlag, orFlags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockServerInterface)(nil).Search), query, onFlag, offFlag, orFlags)
}
