// Code generated by MockGen. DO NOT EDIT.
// Source: VectorSphere/index/index.go

// Package mocks is a generated GoMock package.
package mocks

import (
	messages "VectorSphere/src/messages"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIndexInterface is a mock of IndexInterface interface.
type MockIndexInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIndexInterfaceMockRecorder
}

// MockIndexInterfaceMockRecorder is the mock recorder for MockIndexInterface.
type MockIndexInterfaceMockRecorder struct {
	mock *MockIndexInterface
}

// NewMockIndexInterface creates a new mock instance.
func NewMockIndexInterface(ctrl *gomock.Controller) *MockIndexInterface {
	mock := &MockIndexInterface{ctrl: ctrl}
	mock.recorder = &MockIndexInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexInterface) EXPECT() *MockIndexInterfaceMockRecorder {
	return m.recorder
}

// AddDoc mocks base method.
func (m *MockIndexInterface) AddDoc(doc messages.Document) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDoc", doc)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDoc indicates an expected call of AddDoc.
func (mr *MockIndexInterfaceMockRecorder) AddDoc(doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDoc", reflect.TypeOf((*MockIndexInterface)(nil).AddDoc), doc)
}

// Close mocks base method.
func (m *MockIndexInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIndexInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIndexInterface)(nil).Close))
}

// Count mocks base method.
func (m *MockIndexInterface) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockIndexInterfaceMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIndexInterface)(nil).Count))
}

// DelDoc mocks base method.
func (m *MockIndexInterface) DelDoc(docId string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelDoc", docId)
	ret0, _ := ret[0].(int)
	return ret0
}

// DelDoc indicates an expected call of DelDoc.
func (mr *MockIndexInterfaceMockRecorder) DelDoc(docId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelDoc", reflect.TypeOf((*MockIndexInterface)(nil).DelDoc), docId)
}

// Search mocks base method.
func (m *MockIndexInterface) Search(query *messages.TermQuery, onFlag, offFlag uint64, orFlags []uint64) []*messages.Document {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query, onFlag, offFlag, orFlags)
	ret0, _ := ret[0].([]*messages.Document)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockIndexInterfaceMockRecorder) Search(query, onFlag, offFlag, orFlags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIndexInterface)(nil).Search), query, onFlag, offFlag, orFlags)
}
