package enhanced

import (
	"VectorSphere/src/library/logger"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"sync"
	"time"
)

// EnhancedConfig 增强型配置
type EnhancedConfig struct {
	// 基础配置
	ServiceName string `json:"service_name"`
	Version     string `json:"version"`
	Environment string `json:"environment"`
	DataDir     string `json:"data_dir"`
	LogLevel    string `json:"log_level"`

	// 网关配置
	Gateway APIGatewayConfig `json:"gateway"`

	// 负载均衡器配置
	LoadBalancer SimpleLoadBalancerConfig `json:"load_balancer"`

	// 安全管理配置
	Security SimpleSecurityConfig `json:"security"`

	// 熔断器配置
	CircuitBreaker SimpleCircuitBreakerConfig `json:"circuit_breaker"`

	// 健康检查配置
	HealthCheck SimpleHealthCheckConfig `json:"health_check"`

	// 监控配置
	Monitoring MonitoringConfig `json:"monitoring"`
}

// LoadConfig 加载配置
func (ecm *EnhancedConfigManager) LoadConfig() (*EnhancedConfig, error) {
	return ecm.config, nil
}

// ReloadConfig 重新加载配置
func (ecm *EnhancedConfigManager) ReloadConfig() (*EnhancedConfig, error) {
	logger.Info("Reloading enhanced configuration...")

	if err := ecm.loadConfig(); err != nil {
		return nil, err
	}

	// 通知观察者
	ecm.notifyWatchers()

	return ecm.config, nil
}

// ValidateConfig 验证配置
func (ecm *EnhancedConfigManager) ValidateConfig(config *EnhancedConfig) error {
	if config.ServiceName == "" {
		return fmt.Errorf("service_name不能为空")
	}

	if config.Gateway.Port <= 0 || config.Gateway.Port > 65535 {
		return fmt.Errorf("gateway.port必须在1-65535范围内")
	}

	if config.LoadBalancer.Algorithm == "" {
		return fmt.Errorf("load_balancer.algorithm不能为空")
	}

	validAlgorithms := []string{"round_robin", "weighted_round_robin", "least_connections", "ip_hash"}
	validAlgorithm := false
	for _, alg := range validAlgorithms {
		if config.LoadBalancer.Algorithm == alg {
			validAlgorithm = true
			break
		}
	}
	if !validAlgorithm {
		return fmt.Errorf("load_balancer.algorithm必须是: %v", validAlgorithms)
	}

	if config.Security.JWTSecret == "" {
		return fmt.Errorf("security.jwt_secret不能为空")
	}

	if config.CircuitBreaker.FailureThreshold <= 0 {
		return fmt.Errorf("circuit_breaker.failure_threshold必须大于0")
	}

	if config.HealthCheck.Interval <= 0 {
		return fmt.Errorf("health_check.interval必须大于0")
	}

	return nil
}

// HasConfigChanged 检查配置是否已更改
func (ecm *EnhancedConfigManager) HasConfigChanged() bool {
	fileInfo, err := os.Stat(ecm.configPath)
	if err != nil {
		return false
	}

	ecm.mutex.RLock()
	lastModTime := ecm.lastModTime
	ecm.mutex.RUnlock()

	return fileInfo.ModTime().After(lastModTime)
}

// AddWatcher 添加配置变更观察者
func (ecm *EnhancedConfigManager) AddWatcher(watcher *ConfigWatcher) {
	ecm.watchersMutex.Lock()
	defer ecm.watchersMutex.Unlock()
	ecm.watchers[watcher.Namespace] = watcher
}

// GetConfigSummary 获取配置摘要
func (ecm *EnhancedConfigManager) GetConfigSummary() map[string]interface{} {
	ecm.mutex.RLock()
	defer ecm.mutex.RUnlock()

	return map[string]interface{}{
		"service_name":            ecm.config.ServiceName,
		"version":                 ecm.config.Version,
		"environment":             ecm.config.Environment,
		"gateway_port":            ecm.config.Gateway.Port,
		"load_balancer_algorithm": ecm.config.LoadBalancer.Algorithm,
		"security_enabled":        ecm.config.Security.EnableRateLimit,
		"circuit_breaker_enabled": ecm.config.CircuitBreaker.EnableMetrics,
		"health_check_interval":   ecm.config.HealthCheck.Interval,
		"last_modified":           ecm.lastModTime,
	}
}

// loadConfig 加载配置文件
func (ecm *EnhancedConfigManager) loadConfig() error {
	// 检查文件是否存在
	if _, err := os.Stat(ecm.configPath); os.IsNotExist(err) {
		// 创建默认配置
		logger.Info("Configuration file not found, creating default: %s", ecm.configPath)
		if err := ecm.createDefaultConfig(); err != nil {
			return fmt.Errorf("创建默认配置失败: %v", err)
		}
	}

	// 读取配置文件
	data, err := ioutil.ReadFile(ecm.configPath)
	if err != nil {
		return fmt.Errorf("读取配置文件失败: %v", err)
	}

	// 解析配置
	var config EnhancedConfig
	if err := json.Unmarshal(data, &config); err != nil {
		return fmt.Errorf("解析配置文件失败: %v", err)
	}

	// 获取文件修改时间
	fileInfo, err := os.Stat(ecm.configPath)
	if err != nil {
		return fmt.Errorf("获取文件信息失败: %v", err)
	}

	// 更新配置
	ecm.mutex.Lock()
	ecm.config = &config
	ecm.lastModTime = fileInfo.ModTime()
	ecm.mutex.Unlock()

	logger.Info("Configuration loaded successfully: %s", config.ServiceName)
	return nil
}

// createDefaultConfig 创建默认配置
func (ecm *EnhancedConfigManager) createDefaultConfig() error {
	defaultConfig := &EnhancedConfig{
		ServiceName: "enhanced-vector-sphere",
		Version:     "1.0.0",
		Environment: "development",
		DataDir:     "./data",
		LogLevel:    "info",
		Gateway: APIGatewayConfig{
			Port:              8080,
			ReadTimeout:       30 * time.Second,
			WriteTimeout:      30 * time.Second,
			IdleTimeout:       60 * time.Second,
			MaxHeaderBytes:    1 << 20, // 1MB
			EnableCORS:        true,
			EnableCompression: true,
			EnableMetrics:     true,
			EnableLogging:     true,
		},
		LoadBalancer: LoadBalancerConfig{
			Algorithm:            "round_robin",
			HealthCheckInterval:  30,
			MaxRetries:           3,
			RetryDelay:           1000,
			EnableStickySessions: false,
			SessionTimeout:       30,
			EnableMetrics:        true,
			MaxConnections:       1000,
			ConnectionTimeout:    10,
		},
		Security: SecurityConfig{
			JWTSecret:          "your-secret-key-change-in-production",
			TokenExpiration:    24,
			EnableRateLimit:    true,
			RateLimitPerSecond: 100,
			EnableIPWhitelist:  false,
			IPWhitelist:        []string{"127.0.0.1", "::1"},
			EnableEncryption:   false,
			EncryptionKey:      "",
			EnableAuditLog:     true,
			AuditLogPath:       "./logs/audit.log",
			MaxLoginAttempts:   5,
			LockoutDuration:    15,
		},
		CircuitBreaker: CircuitBreakerConfig{
			FailureThreshold:    5,
			RecoveryTimeout:     60,
			MaxRequests:         100,
			Interval:            60,
			Timeout:             30,
			EnableMetrics:       true,
			EnableNotification:  false,
			NotificationURL:     "",
			HalfOpenMaxRequests: 10,
		},
		HealthCheck: HealthCheckConfig{
			Interval:           30,
			Timeout:            10,
			RetryCount:         3,
			RetryDelay:         1000,
			EnableDeepCheck:    true,
			EnableMetrics:      true,
			EnableNotification: false,
			UnhealthyThreshold: 3,
			HealthyThreshold:   2,
			HealthCheckPath:    "/health",
			ExpectedStatusCode: 200,
		},
		Monitoring: MonitoringConfig{
			EnableMetrics:      true,
			MetricsPort:        9090,
			MetricsPath:        "/metrics",
			EnableTracing:      false,
			TracingEndpoint:    "",
			EnableProfiling:    false,
			ProfilingPort:      6060,
			CollectionInterval: 60,
		},
	}

	// 确保目录存在
	dir := filepath.Dir(ecm.configPath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return fmt.Errorf("创建配置目录失败: %v", err)
	}

	// 序列化配置
	data, err := json.MarshalIndent(defaultConfig, "", "  ")
	if err != nil {
		return fmt.Errorf("序列化默认配置失败: %v", err)
	}

	// 写入文件
	if err := ioutil.WriteFile(ecm.configPath, data, 0644); err != nil {
		return fmt.Errorf("写入配置文件失败: %v", err)
	}

	logger.Info("Default configuration created: %s", ecm.configPath)
	return nil
}

// SaveConfig 保存配置
func (ecm *EnhancedConfigManager) SaveConfig(config *EnhancedConfig) error {
	// 验证配置
	if err := ecm.ValidateConfig(config); err != nil {
		return fmt.Errorf("配置验证失败: %v", err)
	}

	// 序列化配置
	data, err := json.MarshalIndent(config, "", "  ")
	if err != nil {
		return fmt.Errorf("序列化配置失败: %v", err)
	}

	// 写入文件
	if err := os.WriteFile(ecm.configPath, data, 0644); err != nil {
		return fmt.Errorf("写入配置文件失败: %v", err)
	}

	// 更新内存中的配置
	ecm.mutex.Lock()
	ecm.config = config
	ecm.lastModTime = time.Now()
	ecm.mutex.Unlock()

	// 通知观察者
	ecm.notifyWatchers()

	logger.Info("Configuration saved successfully")
	return nil
}
