syntax = "proto3";

package server;

// 从-I指定的目录下寻找该proto文件
import "doc.proto";
import "term_query.proto";
import "key_word.proto";

message DocId {
  string Id = 1;
  int64 Weight = 2;
}

message ResCount {
  int32 Count = 1;
}

message Request {
  messages.TermQuery Query = 1;  //TermQuery类型引用自term_query.proto
  uint64 OnFlag = 2;
  uint64 OffFlag = 3;
  repeated uint64 OrFlags = 4;
}

message Result {
  repeated messages.Document Results = 1;
}

message CountRequest {
}

// 任务请求
message TaskRequest {
  string task_id = 1;         // 任务ID
  string task_type = 2;       // 任务类型
  bytes task_data = 3;        // 任务数据
  int64 timeout = 4;          // 超时时间（毫秒）
}

// 任务响应
message TaskResponse {
  string task_id = 1;         // 任务ID
  string slave_id = 2;
  bool success = 3;           // 是否成功
  bytes result_data = 4;      // 结果数据
  string error_message = 5;   // 错误信息
  int64 end_time = 6;
}
// 创建表请求
message CreateTableRequest {
  string table_name = 1;
  string vector_db_path = 2;
  int32 num_clusters = 3;
  int32 inverted_index_order = 4;
}
// 表请求
message TableRequest {
  string table_name = 1;
}

// 添加文档请求
message AddDocumentRequest {
  string table_name = 1;
  messages.Document document = 2;
  int32 vectorized_type = 3;
}

// 删除文档请求
message DeleteDocumentRequest {
  string table_name = 1;
  string doc_id = 2;
  repeated messages.KeyWord keywords = 3;
}

// 搜索请求
message SearchRequest {
  string table_name = 1;
  messages.TermQuery query = 2;
  int32 vectorized_type = 3;
  int32 k = 4;
  int32 probe = 5;
  uint64 on_flag = 6;
  uint64 off_flag = 7;
  repeated uint64 or_flags = 8;
  bool use_ann = 9;
}

// 搜索结果
message SearchResult {
  repeated string doc_ids = 1;
}
// Health Check Messages
message HealthCheckRequest {
  // 可以根据需要添加字段，例如服务版本等
}
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3; // The service is not known
  }
  ServingStatus status = 1;
  float load = 2; // 例如：CPU负载或任务队列长度
}
service IndexService {
  rpc DelDoc(DocId) returns (ResCount);
  rpc AddDoc(messages.Document) returns (ResCount);
  rpc Search(Request) returns (Result);
  rpc Count(CountRequest) returns (ResCount);

  // 新增任务相关方法
  rpc ExecuteTask(TaskRequest) returns (TaskResponse);  // 从服务执行任务
  rpc ReportTaskResult(TaskResponse) returns (ResCount); // 从服务上报任务结果

  // 多表操作
  rpc CreateTable(CreateTableRequest) returns (ResCount);
  rpc DeleteTable(TableRequest) returns (ResCount);
  rpc AddDocumentToTable(AddDocumentRequest) returns (ResCount);
  rpc DeleteDocumentFromTable(DeleteDocumentRequest) returns (ResCount);
  rpc SearchTable(SearchRequest) returns (SearchResult);

  // Health Check RPC
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);

  // Distributed File Service RPCs
  rpc StoreShard(StoreShardRequest) returns (StoreShardResponse); // 存储分片
  rpc GetShard(GetShardRequest) returns (GetShardResponse);       // 获取分片
  rpc DeleteShard(DeleteShardRequest) returns (DeleteShardResponse); // 删除分片
  rpc SyncMetadata(SyncMetadataRequest) returns (SyncMetadataResponse); // 同步元数据
}

// StoreShardRequest 存储分片请求
message StoreShardRequest {
  string filename = 1; // 文件名
  string shard_id = 2; // 分片ID
  bytes data = 3;     // 分片数据
  string checksum = 4; // 校验和
}

// StoreShardResponse 存储分片响应
message StoreShardResponse {
  bool success = 1;
  string error_message = 2;
}

// GetShardRequest 获取分片请求
message GetShardRequest {
  string filename = 1; // 文件名
  string shard_id = 2; // 分片ID
}

// GetShardResponse 获取分片响应
message GetShardResponse {
  bytes data = 1; // 分片数据
  string error_message = 2;
}

// DeleteShardRequest 删除分片请求
message DeleteShardRequest {
  string filename = 1; // 文件名
  string shard_id = 2;  // 分片ID (注意：distributed_file_service.go 中是 int32，但通常 string 更灵活)
}

// DeleteShardResponse 删除分片响应
message DeleteShardResponse {
  bool success = 1;
  string error_message = 2;
}

// SyncMetadataRequest 同步元数据请求
message SyncMetadataRequest {
  string filename = 1;    // 文件名
  bytes metadata = 2;     // 序列化后的元数据
  int64 version = 3;      // 版本号
}

// SyncMetadataResponse 同步元数据响应
message SyncMetadataResponse {
  bool success = 1;
  string error_message = 2;
}

// protoc -I=D:/code/VectorSphere/messages/proto --gogofaster_opt=Mdoc.proto=VectorSphere/messages --gogofaster_opt=Mterm_query.proto=VectorSphere/messages --gogofaster_out=plugins=grpc:./server --proto_path=./server/proto request.proto